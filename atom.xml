<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>starry的碎碎念</title>
  
  
  <link href="https://starry.github.io/atom.xml" rel="self"/>
  
  <link href="https://starry.github.io/"/>
  <updated>2023-03-18T04:48:39.888Z</updated>
  <id>https://starry.github.io/</id>
  
  <author>
    <name>starry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模板，组合和继承，虚函数和多态</title>
    <link href="https://starry.github.io/2023/03/17/%E6%A8%A1%E6%9D%BF%EF%BC%8C%E7%BB%84%E5%90%88%E5%92%8C%E7%BB%A7%E6%89%BF%EF%BC%8C%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E5%A4%9A%E6%80%81/"/>
    <id>https://starry.github.io/2023/03/17/%E6%A8%A1%E6%9D%BF%EF%BC%8C%E7%BB%84%E5%90%88%E5%92%8C%E7%BB%A7%E6%89%BF%EF%BC%8C%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E5%A4%9A%E6%80%81/</id>
    <published>2023-03-17T11:30:11.000Z</published>
    <updated>2023-03-18T04:48:39.888Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="扩展补充：类模板，函数模板"><a href="#扩展补充：类模板，函数模板" class="headerlink" title="扩展补充：类模板，函数模板"></a>扩展补充：类模板，函数模板</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317194012183.png" alt="image-20230317194012183"></p><ul><li><p>static数据在内存中仅有一份</p></li><li><p>静态函数没有this，只能处理静态数据</p></li><li><p>静态数据需要在class外面设初值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">account</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">double</span> m_rate;<span class="comment">//仅仅是声明</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">set_rate</span><span class="params">(<span class="type">const</span> <span class="type">double</span>&amp; x)</span></span>&#123;m_rate=x；&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">double</span> account::m_rate=<span class="number">8.0</span>; <span class="comment">//分配内存</span></span><br></pre></td></tr></table></figure></li><li><p>两种方式使用静态函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">①account::<span class="built_in">set_rate</span>(<span class="number">5.0</span>);</span><br><span class="line">②account a;</span><br><span class="line">a.<span class="built_in">set_rate</span>(<span class="number">5.0</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="把构造函数放在private"><a href="#把构造函数放在private" class="headerlink" title="把构造函数放在private"></a>把构造函数放在private</h3><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317193945708.png" alt="image-20230317193945708"></p><ul><li><p>只希望产生一个class 对象a</p></li><li><p>未调用时a就在内存中，改进如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A&amp; <span class="title">getinstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">A</span>();</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">const</span> A&amp; rhs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">A&amp; <span class="title">A::getinstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">static</span> A a;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="cout"><a href="#cout" class="headerlink" title="cout"></a>cout</h3><ul><li><p>为什么cout可以打印这么多类型的值？难道列举了很多情况吗？</p><p><font color="blue">没错就是这样！重载列举了很多情况</font></p></li></ul><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><h4 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">complex</span>&#123;</span><br><span class="line">    、、、</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h4><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317195645586.png" alt="image-20230317195645586"></p><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317200241159.png" alt="image-20230317200241159"></p><h2 id="组合与继承"><a href="#组合与继承" class="headerlink" title="组合与继承"></a>组合与继承</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317211043848.png"></p><ul><li>虚函数搭配继承最有价值</li><li>继承关系下的构造函数和析构函数</li></ul><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317210551039.png" alt="image-20230317210551039"></p><h4 id="继承关系下的虚函数"><a href="#继承关系下的虚函数" class="headerlink" title="继承关系下的虚函数"></a>继承关系下的虚函数</h4><p>函数继承是继承函数的调用权（纯虚函数子类一定要复现，在父类中不知道具体实现）</p><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317211553260.png" alt="image-20230317211553260"></p><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317212037645.png" alt="image-20230317212037645"></p><p><font color="blue">调用过程</font></p><ul><li>创建一个子类，子类调用父类的onfileopen()函数</li><li>执行onfileopen（）到serialize（）函数发现子类复现了就执行子类的serialize（）函数</li></ul><h3 id="复合"><a href="#复合" class="headerlink" title="复合"></a>复合</h3><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317201328846.png"></p><ul><li><p>类里面有另一个东西。queue里面的功能能够调用deque的功能</p><p>①可以给函数换名或者缩减操作</p></li><li><p>复合的内存大小是叠加的</p></li><li><p>复合关系下的构造函数（由内而外）和析构（由外而内）</p><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317202206284.png" alt="image-20230317202206284"></p></li></ul><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317202512141.png" alt="image-20230317202512141"></p><ul><li><font color="red">学术界说by reference，没有说by point</font></li><li>右边如何变动都不会影响左边，使用更加灵活</li><li>如果a想改动hello，先给一份副本给a自己改动，这样不影响b和c</li></ul><h3 id="继承-复合"><a href="#继承-复合" class="headerlink" title="继承+复合"></a>继承+复合</h3><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317213024009.png" alt="image-20230317213024009"></p><ul><li><p>①构造时，先都调用父类的构造函数，然后调用组合的构造函数，最后自己的构造函数</p><p>②析构时，自己-&gt;组合-&gt;父类</p></li><li><p>①构造时，父类的组合-&gt;父类-&gt;自己</p></li><li><p>②析构时，自己-&gt;父类-&gt;父类的组合</p></li></ul><h3 id="委托-继承"><a href="#委托-继承" class="headerlink" title="委托+继承"></a>委托+继承</h3><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230318103010984.png" alt="image-20230318103010984"></p><ul><li>subject和observer是委托关系，observer作为父类可以被继承</li></ul><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230318122802982.png" alt="image-20230318122802982"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;扩展补充：类模板，函数模板&quot;&gt;&lt;a href=&quot;#扩展补充：类模板，函数模板&quot; class=&quot;headerlink&quot; title=&quot;扩展补充：类模板，函数模板&quot;&gt;&lt;/a&gt;扩展补充：类模板，函数模板&lt;/h2&gt;&lt;h3 id=&quot;static&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>三大函数和堆、栈、内存管理</title>
    <link href="https://starry.github.io/2023/03/17/%E4%B8%89%E5%A4%A7%E5%87%BD%E6%95%B0%EF%BC%9A%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%EF%BC%8C%E6%8B%B7%E8%B4%9D%E5%A4%8D%E5%88%B6%EF%BC%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    <id>https://starry.github.io/2023/03/17/%E4%B8%89%E5%A4%A7%E5%87%BD%E6%95%B0%EF%BC%9A%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%EF%BC%8C%E6%8B%B7%E8%B4%9D%E5%A4%8D%E5%88%B6%EF%BC%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/</id>
    <published>2023-03-17T08:56:17.000Z</published>
    <updated>2023-03-17T11:21:26.544Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="三大函数"><a href="#三大函数" class="headerlink" title="三大函数"></a>三大函数</h2><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317170645327.png" alt="image-20230317170645327"></p><h3 id="拷贝构造"><a href="#拷贝构造" class="headerlink" title="拷贝构造"></a>拷贝构造</h3><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317171413376.png" alt="image-20230317171018208"></p><ul><li>字符串最后以’\0’作结尾</li></ul><h3 id="拷贝赋值（s3-x3D-s2）"><a href="#拷贝赋值（s3-x3D-s2）" class="headerlink" title="拷贝赋值（s3&#x3D;s2）"></a>拷贝赋值（<font color="blue">s3&#x3D;s2</font>）</h3><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317172209325.png" alt="image-20230317172209325"></p><ul><li>先把左边清空</li><li>创建一个和右边一样大的空间</li><li>把右边的内容复制到左边</li><li><font color="blue">如果没有检测自我赋值，除了影响效率，还会影响结果的正确性</font><br><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317172644912.png" alt="image-20230317172644912"></li></ul><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><ul><li>class有指针多半要做动态分配，动态分配需要析构函数来delete动态分配的空间</li></ul><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>编译器会默认给一套，一个字符一个字符拷贝。指针的拷贝不能用默认的那一套（浅拷贝），必须自己定义一套（深拷贝）</li></ul><h4 id="class有指针必须要拷贝构造和拷贝复制"><a href="#class有指针必须要拷贝构造和拷贝复制" class="headerlink" title="class有指针必须要拷贝构造和拷贝复制"></a>class有指针必须要拷贝构造和拷贝复制</h4><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317171751931.png" alt="image-20230317171751931"></p><ul><li><p>浅拷贝（只拷贝指针，没有拷贝内容）：b部分会造成内存泄露，a,b指向同一部分，修改a，b也会受影响</p></li><li><p>深拷贝（拷贝内容）也就是重载的操作</p></li></ul><h2 id="堆、栈、内存管理"><a href="#堆、栈、内存管理" class="headerlink" title="堆、栈、内存管理"></a>堆、栈、内存管理</h2><h3 id="堆、栈"><a href="#堆、栈" class="headerlink" title="堆、栈"></a>堆、栈</h3><ul><li><p>栈：是存在于某作用域（scope）的一块内存空间，调用函数时函数本身会形成一个栈来放置所接收的参数以及返回地址</p><p>在函数本体内声明的任何变量，其所用的内存块都取自栈</p></li><li><p>堆：操作系统提供的一块global空间，程序会动态分配从中取若干区块</p><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317173120272.png" alt="image-20230317173120272"></p></li><li><p><font color="blue">栈内的变量离开时自动释放，静态对象在离开时不会调用析构函数。堆里取空间的变量需要手动delete</font></p><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317173644944.png" alt="image-20230317173644944"></p></li></ul><h4 id="堆对象的生命期"><a href="#堆对象的生命期" class="headerlink" title="堆对象的生命期"></a>堆对象的生命期</h4><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317173922013.png" alt="image-20230317173922013"></p><h5 id="new-操作的具体过程"><a href="#new-操作的具体过程" class="headerlink" title="new 操作的具体过程"></a>new 操作的具体过程</h5><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317174214303.png" alt="image-20230317174214303"></p><ul><li>构造函数是成员函数，隐含有this指针</li></ul><h5 id="delete操作的具体操作"><a href="#delete操作的具体操作" class="headerlink" title="delete操作的具体操作"></a>delete操作的具体操作</h5><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317174612483.png" alt="image-20230317174612483"></p><ul><li>析构函数是将指针指向的那块内容杀掉</li><li>free(ps)杀掉字符串本身（即指针）</li></ul><h5 id="动态分配的内存块（在vc编译器中，分配的内存都是16的倍数）"><a href="#动态分配的内存块（在vc编译器中，分配的内存都是16的倍数）" class="headerlink" title="动态分配的内存块（在vc编译器中，分配的内存都是16的倍数）"></a>动态分配的内存块（在vc编译器中，分配的内存都是16的倍数）</h5><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317175547485.png" alt="image-20230317175547485"></p><ul><li>红色部分是用来指明需要回收的大小，有助于系统回收（末位为1代表给你了，为0代表没有；倒数第二位代表占据几个16）</li></ul><h5 id="动态分配所得的array"><a href="#动态分配所得的array" class="headerlink" title="动态分配所得的array"></a>动态分配所得的array</h5><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317181422299.png" alt="image-20230317181422299"></p><ul><li><p>new [] 一定要搭配 delete []使用，不然会造成内存泄漏（分配的内存块并不会造成内存泄漏，是指针指向的内存发生泄漏）</p></li><li><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317181600153.png" alt="image-20230317181600153"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;三大函数&quot;&gt;&lt;a href=&quot;#三大函数&quot; class=&quot;headerlink&quot; title=&quot;三大函数&quot;&gt;&lt;/a&gt;三大函数&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/starr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>操作符重载与临时对象</title>
    <link href="https://starry.github.io/2023/03/16/%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E4%B8%8E%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1/"/>
    <id>https://starry.github.io/2023/03/16/%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E4%B8%8E%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1/</id>
    <published>2023-03-16T08:30:07.000Z</published>
    <updated>2023-03-17T08:54:19.255Z</updated>
    
    <content type="html"><![CDATA[<h3 id="成员函数的操作符重载-有this，两个数相加结果给其中一个数"><a href="#成员函数的操作符重载-有this，两个数相加结果给其中一个数" class="headerlink" title="成员函数的操作符重载(有this，两个数相加结果给其中一个数)"></a>成员函数的操作符重载(有this，两个数相加结果给其中一个数)</h3><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230316163733618.png" alt="image-20230316163733618"></p><ul><li>所有的成员函数都带有一个隐藏的参数this，this指向调用者</li><li>this不用在函数参数中出现，函数中直接使用就行</li><li>*this是一个东西，complex&amp;是一个reference。因为传递者无需知道接收者是以reference形式接收的</li></ul><h3 id="非成员函数的操作符重载（无this，两个数相加，结果给新建的一个数）"><a href="#非成员函数的操作符重载（无this，两个数相加，结果给新建的一个数）" class="headerlink" title="非成员函数的操作符重载（无this，两个数相加，结果给新建的一个数）"></a>非成员函数的操作符重载（无this，两个数相加，结果给新建的一个数）</h3><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230316170449124.png" alt="image-20230316170449124"></p><ul><li>这是全局函数，每种情况都考虑到</li><li>这些函数不可返回reference，他们的返回值必定是个local object(相加之后的结果放在函数中创建出的值，离开函数就死亡)，一定要return by value</li><li><font color="red">tyname()创建临时对象，生命到下一行就结束了</font> 如 complex(4,5)</li></ul><h3 id="lt-lt-操作符重载"><a href="#lt-lt-操作符重载" class="headerlink" title="&lt;&lt;操作符重载"></a>&lt;&lt;操作符重载</h3><ul><li><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/image-20230317151352652.png" alt="image-20230317151352652"></li><li>cout的函数类型是ostream，os 不可以使用const，因为在输出时其实一直在改变os的状态的</li><li>没有人在意返回值是什么，可以使用void。但是考虑到连续的输出，需要第一次的返回值作为ostream参数输入</li></ul><h3 id="设计一个class需要注意的事情"><a href="#设计一个class需要注意的事情" class="headerlink" title="设计一个class需要注意的事情"></a>设计一个class需要注意的事情</h3><ul><li><font color="red">complex(doule r&#x3D;0,doule i&#x3D;0):re(r),im(i) {}</font>，初值列一定要会用</li><li>函数该不该加const，首先考虑加</li><li>参数的传递考虑加const和reference（传出去的东西如果不是local object考虑传reference），首先考虑加</li><li>数据大部分放在private，函数放在public</li><li>友元函数可以直接调用class的private数据</li><li>inline函数最终还是看编译器的选择，可以加上选择建议编译为inline函数</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;成员函数的操作符重载-有this，两个数相加结果给其中一个数&quot;&gt;&lt;a href=&quot;#成员函数的操作符重载-有this，两个数相加结果给其中一个数&quot; class=&quot;headerlink&quot; title=&quot;成员函数的操作符重载(有this，两个数相加结果给其中一个数)&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo+github搭建个人服务器教程</title>
    <link href="https://starry.github.io/2023/03/15/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://starry.github.io/2023/03/15/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/</id>
    <published>2023-03-15T09:14:23.000Z</published>
    <updated>2023-03-15T12:09:27.285Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="github账号"><a href="#github账号" class="headerlink" title="github账号"></a>github账号</h3><ul><li><a href="https://github.com/">官网</a></li><li><a href="https://blog.csdn.net/yaorongke/article/details/119086305">安装教程</a></li></ul><h3 id="下载安装git"><a href="#下载安装git" class="headerlink" title="下载安装git"></a>下载安装git</h3><ul><li><a href="https://gitforwindows.org/">git下载地址</a></li><li><a href="https://blog.csdn.net/yaorongke/article/details/119085413">git安装教程</a></li></ul><h3 id="下载安装hode-js"><a href="#下载安装hode-js" class="headerlink" title="下载安装hode.js"></a>下载安装hode.js</h3><ul><li><a href="https://nodejs.org/zh-cn/download/">node.js下载地址</a></li><li><a href="https://blog.csdn.net/yaorongke/article/details/119084295">node.is安装教程</a></li></ul><h2 id="搭建github仓库"><a href="#搭建github仓库" class="headerlink" title="搭建github仓库"></a>搭建github仓库</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>申请一个新的代码仓库用于保存网页</p><ul><li>点击 <font color="red"> your repositories </font>,进入仓库页面</li><li>点击<font color="red">New</font>按钮，进入仓库创建页面</li><li>填写仓库名，格式必须为<font color="red">&lt;用户名&gt;.github.io</font>，点击<font color="red">initialize this respository with a README </font>,然后点击<font color="red">Create repository</font></li><li>GitHub <font color="red">Pages</font>中找到我们主页的地址为 <a href="https://starry407.github.io/">https://starry407.github.io/</a></li></ul><h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><p>将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;自己的用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;自己的email&quot;</span></span><br></pre></td></tr></table></figure><p>提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/. ssh <span class="comment">#检查本机已存在的ssh密钥</span></span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git,进行如下步骤生成密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;3135473569@qq.com&quot;</span> <span class="comment">#随便一个邮箱就好</span></span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：<br>将刚复制的内容粘贴到key那里，title随便填</p><p><img src="https://raw.githubusercontent.com/starry407/clouding/main/images/20190512111036837.png"></p><h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，然后会看到：</p><blockquote><p>Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>看到这个信息说明SSH已配置成功！</p><h3 id="假如ssh-key配置失败，那么只要以下步骤就能完全解决"><a href="#假如ssh-key配置失败，那么只要以下步骤就能完全解决" class="headerlink" title="假如ssh-key配置失败，那么只要以下步骤就能完全解决"></a>假如ssh-key配置失败，那么只要以下步骤就能完全解决</h3><ul><li>首先，清除所有的key-pair<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -D</span><br><span class="line"><span class="built_in">rm</span> -r ~/.ssh</span><br></pre></td></tr></table></figure></li><li>删除你在github中的public-key<br>重新生成ssh密钥对<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;3135473569@qq.com&quot;</span> <span class="comment">#随便一个邮箱就好</span></span><br></pre></td></tr></table></figure>接下来正常操作<br>在github上添加公钥public-key:<br>1、.ssh&#x2F;id_rsa.pub将公钥内容复制到剪切板<br>2、在github上添加公钥时，直接复制即可<br>3、保存<br>测试：<br>在终端 运行 ssh -T <a href="mailto:&#x67;&#105;&#x74;&#x40;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;">&#x67;&#105;&#x74;&#x40;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;</a></li></ul><h2 id="使用hexo写博客"><a href="#使用hexo写博客" class="headerlink" title="使用hexo写博客"></a>使用hexo写博客</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装Hexo，在自己认为合适的地方创个文件夹,在该文件夹下打开命令行,输入以下指令开始安装Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line">hexo init <span class="comment">#初始化hexo</span></span><br><span class="line">hexo g <span class="comment">#生成</span></span><br><span class="line">hexo s <span class="comment">#启动服务</span></span><br></pre></td></tr></table></figure><p><font color="blue">hexo s</font>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a></p><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p><a href="https://hexo.io/themes/">官方主题</a></p><ul><li>下载主题<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia </span><br></pre></td></tr></table></figure>下载后的主题在themes文件夹中</li><li>修改_config.yml 文件中的theme: landscape改为theme: yilia</li></ul><h3 id="上传github"><a href="#上传github" class="headerlink" title="上传github"></a>上传github</h3><ul><li>安装插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li>修改_config.yml 文件中deploy的部分<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:starry407/starry407.github.io.git <span class="comment"># repo值是你在github项目里的ssh（右下角）</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li>hexo new “postName” 编辑好md文件直接运行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp;hexo d -g</span><br></pre></td></tr></table></figure>如果hexo new “postName” 并未生成同名文件夹，把主页配置文件_config.yml 里的post_asset_folder: 这个选项设置为true,安装插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li></ul><h3 id="常见hexo命令"><a href="#常见hexo命令" class="headerlink" title="常见hexo命令"></a>常见hexo命令</h3><ul><li>常见命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;postName&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;pageName&quot;</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure></li><li>缩写<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure></li><li>组合命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g <span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="遇见问题"><a href="#遇见问题" class="headerlink" title="遇见问题"></a>遇见问题</h2><h3 id="butterfly主题配置"><a href="#butterfly主题配置" class="headerlink" title="butterfly主题配置"></a>butterfly主题配置</h3><p><a href="https://zhuanlan.zhihu.com/p/492207978">Hexo Butterfly主题相关配置</a></p><h3 id="typora使用picgo-core作为图床"><a href="#typora使用picgo-core作为图床" class="headerlink" title="typora使用picgo-core作为图床"></a>typora使用picgo-core作为图床</h3><p><a href="https://blog.csdn.net/qq_42940160/article/details/120924588">使用PicGo-Core将Github作为Typora的图床</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;h3 id=&quot;github账号&quot;&gt;&lt;a href=&quot;#github账号&quot; class=&quot;headerl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://starry.github.io/2023/03/14/hello-world/"/>
    <id>https://starry.github.io/2023/03/14/hello-world/</id>
    <published>2023-03-14T05:43:43.587Z</published>
    <updated>2023-03-14T05:43:43.587Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
